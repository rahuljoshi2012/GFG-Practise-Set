class Solution
{
    public String findOrder(String [] dict, int n, int k)
    {
        Map<Integer,ArrayList<Integer>> map = new HashMap<>();
		for(int i=0;i<k;i++) {
			map.put(i, new ArrayList<>());
		}
		for(int i=0;i<dict.length-1;i++) {
			String s1 = dict[i];
			String s2 = dict[i+1];
			int ps1 = 0;
			int ps2 = 0;
			while(ps1<s1.length() && ps2<s2.length()) {
				if(s1.charAt(ps1)!=s2.charAt(ps2)) {
					if(!map.containsKey(s1.charAt(ps1)-'a')) {
						map.get(s1.charAt(ps1)-'a').add(s2.charAt(ps2)-'a');
					}else {
						map.get(s1.charAt(ps1)-'a').add(s2.charAt(ps2)-'a');
					}
					break;
				}else {
					ps1++;
					ps2++;
				}
			}
		}
		int indeg[] = new int[k];
		Queue<Integer> q = new LinkedList<>();
		for(int i=0;i<map.size();i++) {
			for(Integer it : map.get(i)) {
				indeg[it]++;
			}
		}
		
		for(int i=0;i<indeg.length;i++) {
			if(indeg[i]==0) {
				q.add(i);
			}
		}
		ArrayList<Integer> ans = new ArrayList<>();
		while(!q.isEmpty()) {
			int val = q.poll();
			ans.add(val);
			for(Integer it : map.get(val)) {
				indeg[it]--;
				if(indeg[it]==0) {
					q.add(it);
				}
			}
			
		}
		String currAns = "";
		for(int i=0;i<ans.size();i++) {
			currAns +=  (char) (ans.get(i)+'a');
		}

		return currAns;
	}
}
