class Solution
{
    public int orangesRotting(int[][] grid)
    {
        
        int n = grid.length;
        int m = grid[0].length;
        
        int vis[][] = new int[n][m];
        
        int freshCount = 0;
        int minTime = 0;
        
        Queue<int[]> q = new LinkedList<>();
        
        int direction[][] = { {-1,0} ,{0,1} , {1,0} , {0 , -1} };
        
        for(int i = 0 ; i<n ; i++){
            for(int j = 0 ; j<m ;  j++){
                
                if(grid[i][j] == 2){
                    vis[i][j] = 2;
                    q.add(new int[]{i , j , 0});
                }
                
                else if(grid[i][j] == 1){
                    freshCount++;
                }
            }
        }
        
        while(!q.isEmpty())    {


            int[] curr = q.poll();
            int row = curr[0];
            int col = curr[1];
            int time = curr[2];
            
            minTime = Math.max(minTime , time);


            for(int[] dir : direction){
                
                int nrow = row + dir[0];
                int ncol = col + dir[1];
                
                if(nrow >= 0 && nrow < n && ncol >=0 && ncol < m
                && grid[nrow][ncol] == 1 && vis[nrow][ncol] != 2)
                {
                    
                    vis[nrow][ncol] = 2;
                    q.add(new int[]{nrow , ncol , time + 1});
                    
                    freshCount--;
                }
                
            }
            
        }
        
        return freshCount == 0 ? minTime : -1;     
    }
}
