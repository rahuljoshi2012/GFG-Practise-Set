class Solution{
    void inorder(Node root1,Node root2,Queue<Integer> s1,Queue<Integer> s2){
        if(root1==null && root2==null){
            return ;
        }
        
        else if(root2==null){
            inorder(root1.left,root2,s1,s2);
            s1.add(root1.data);
            inorder(root1.right,root2,s1,s2);
        }
        
        else if(root1==null){
            inorder(root1,root2.left,s1,s2);
            s2.add(root2.data);
            inorder(root1,root2.right,s1,s2);
        }
        else{
            inorder(root1.left,root2.left,s1,s2);
            s1.add(root1.data);
            s2.add(root2.data);
            inorder(root1.right,root2.right,s1,s2);}
    }
    
    public List<Integer> merge(Node root1,Node root2){
        List<Integer> l=new ArrayList<>();
        Queue<Integer> q1=new ArrayDeque<>();
        Queue<Integer> q2=new ArrayDeque<>();
        inorder(root1,root2,q1,q2);
        while(!q1.isEmpty() && !q2.isEmpty()){
            int a=q1.peek();
            int b=q2.peek();
            if(a>b){
                l.add(b);
                q2.remove();
            }
            else{
                l.add(a);
                q1.remove();
            }
        }
        
        while(!q1.isEmpty()){
            l.add(q1.poll());
        }
        while(!q2.isEmpty()){
            l.add(q2.poll());
        }
        
        return l;
    }
}
